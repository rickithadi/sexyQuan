{"version":3,"sources":["ng://@kolkov/angular-editor/lib/angular-editor.service.ts","ng://@kolkov/angular-editor/lib/config.ts","ng://@kolkov/angular-editor/lib/angular-editor-toolbar.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.component.ts","ng://@kolkov/angular-editor/lib/angular-editor.module.ts"],"names":["AngularEditorService","http","_document","_this","this","saveSelection","getSelection","sel","getRangeAt","rangeCount","savedSelection","selectedText","toString","createRange","document","prototype","executeCommand","command","includes","execCommand","createLink","url","newUrl","insertHtml","insertColor","color","where","restoreSelection","setFontName","fontName","setFontSize","fontSize","html","Error","removeAllRanges","addRange","executeInNextQueueIteration","callbackFn","timeout","setTimeout","checkSelection","length","uploadImage","file","uploadData","FormData","append","name","post","uploadUrl","reportProgress","observe","insertImage","imageUrl","setDefaultParagraphSeparator","separator","createCustomClass","customClass","newTag","tagName","tag","class","insertVideo","videoUrl","match","insertYouTubeVideoTag","insertVimeoVideoTag","id","split","thumbnail","sub","get","subscribe","data","thumbnail_url_with_play_button","title","unsubscribe","nextNode","node","hasChildNodes","firstChild","nextSibling","parentNode","getRangeSelectedNodes","range","includePartiallySelectedContainers","startContainer","endNode","endContainer","rangeNodes","push","commonAncestorContainer","unshift","getSelectedNodes","nodes","i","len","apply","replaceWithOwnChildren","el","parent","insertBefore","removeChild","removeSelectedElements","tagNames","tagNamesArray","toLowerCase","forEach","nodeType","indexOf","Injectable","args","providedIn","HttpClient","Inject","DOCUMENT","angularEditorConfig","editable","spellcheck","height","minHeight","maxHeight","width","minWidth","translate","enableToolbar","showToolbar","placeholder","defaultParagraphSeparator","defaultFontName","defaultFontSize","fonts","sanitize","toolbarPosition","AngularEditorToolbarComponent","_renderer","editorService","htmlMode","linkSelected","block","fontId","customClassId","tagMap","BLOCKQUOTE","A","select","buttons","execute","EventEmitter","Object","defineProperty","Boolean","triggerCommand","emit","triggerButtons","e","result","queryCommandState","elementById","getElementById","addClass","removeClass","triggerBlocks","findIndex","x","nodeName","found","y","find","undefined","index","HTMLFontElement","face","defaultFontId","customClasses","Element","className","keys","map","fontColour","queryCommandValue","insertUrl","prompt","setEditorMode","m","toggleEditorModeButton","onFileChanged","event","target","files","type","HttpResponse","body","fileReset","reader","FileReader","onload","_event","readAsDataURL","myInputFile","nativeElement","value","setCustomClass","classId","Component","selector","template","Renderer2","Output","ViewChild","AngularEditorComponent","_domSanitizer","cdRef","modeVisual","showPlaceholder","config","viewMode","blur","focus","ngOnInit","editorToolbar","ngAfterViewInit","onEditorFocus","detectChanges","toggleEditorMode","onContentChange","textArea","innerHTML","exec","onTextAreaFocus","onTextAreaMouseOut","onTextAreaBlur","onTouched","relatedTarget","parentElement","onChange","SecurityContext","HTML","togglePlaceholder","registerOnChange","fn","registerOnTouched","writeValue","refreshView","normalizedValue","setProperty","editorWrapper","setDisabledState","isDisabled","div","action","bToSource","oContent","editableElement","createTextNode","oPre","createElement","setAttribute","oCode","contentEditable","appendChild","all","innerText","selectNodeContents","userSelection","a","focusNode","els","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DomSanitizer","ChangeDetectorRef","Input","AngularEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","exports"],"mappings":"glBAAA,IAAAA,EAAA,WAmBE,SAAAA,EACUC,EACkBC,GAF5B,IAAAC,EAAAC,KACUA,KAAAH,KAAAA,EACkBG,KAAAF,UAAAA,EA8ErBE,KAAAC,cAAa,WAClB,GAAIF,EAAKD,UAAUI,aAAc,KACzBC,EAAMJ,EAAKD,UAAUI,eACvBC,EAAIC,YAAcD,EAAIE,aACxBN,EAAKO,eAAiBH,EAAIC,WAAW,GACrCL,EAAKQ,aAAeJ,EAAIK,iBAEjBT,EAAKD,UAAUI,cAAgBH,EAAKD,UAAUW,YACvDV,EAAKO,eAAiBI,SAASD,cAE/BV,EAAKO,eAAiB,aAjF1BV,EAAAe,UAAAC,eAAA,SAAeC,GACI,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,OAC9CC,SAASD,GACpBb,KAAKF,UAAUiB,YAAY,eAAe,EAAOF,GAGnDb,KAAKF,UAAUiB,YAAYF,GAAS,EAAO,OAO7CjB,EAAAe,UAAAK,WAAA,SAAWC,GACT,GAAKA,EAAIH,SAAS,QAEX,KACCI,EAAS,YAAcD,EAAM,qBAAuBjB,KAAKO,aAAe,OAC9EP,KAAKmB,WAAWD,QAHhBlB,KAAKF,UAAUiB,YAAY,cAAc,EAAOE,IAapDrB,EAAAe,UAAAS,YAAA,SAAYC,EAAeC,GACRtB,KAAKuB,qBAEN,cAAVD,EACFtB,KAAKF,UAAUiB,YAAY,aAAa,EAAOM,GAE/CrB,KAAKF,UAAUiB,YAAY,eAAe,EAAOM,KASvDzB,EAAAe,UAAAa,YAAA,SAAYC,GACVzB,KAAKF,UAAUiB,YAAY,YAAY,EAAOU,IAOhD7B,EAAAe,UAAAe,YAAA,SAAYC,GACV3B,KAAKF,UAAUiB,YAAY,YAAY,EAAOY,IAOxC/B,EAAAe,UAAAQ,WAAR,SAAmBS,GAIjB,IAFuB5B,KAAKF,UAAUiB,YAAY,cAAc,EAAOa,GAGrE,MAAM,IAAIC,MAAM,oCA0BpBjC,EAAAe,UAAAY,iBAAA,WACE,IAAIvB,KAAKM,eAWP,OAAO,EAVP,GAAIN,KAAKF,UAAUI,aAAc,KACzBC,EAAMH,KAAKF,UAAUI,eAG3B,OAFAC,EAAI2B,kBACJ3B,EAAI4B,SAAS/B,KAAKM,iBACX,EACF,QAAIN,KAAKF,UAAUI,mBAAnB,GAYJN,EAAAe,UAAAqB,4BAAP,SAAmCC,EAAmCC,QAAA,IAAAA,IAAAA,EAAA,KACpEC,WAAWF,EAAYC,IAIjBtC,EAAAe,UAAAyB,eAAR,WAIE,GAA4B,IAFPpC,KAAKM,eAAeE,WAExB6B,OACf,MAAM,IAAIR,MAAM,qBAGlB,OAAO,GAOTjC,EAAAe,UAAA2B,YAAA,SAAYC,OAEJC,EAAuB,IAAIC,SAIjC,OAFAD,EAAWE,OAAO,OAAQH,EAAMA,EAAKI,MAE9B3C,KAAKH,KAAK+C,KAAqB5C,KAAK6C,UAAWL,EAAY,CAChEM,gBAAgB,EAChBC,QAAS,YAQbnD,EAAAe,UAAAqC,YAAA,SAAYC,GACVjD,KAAKF,UAAUiB,YAAY,eAAe,EAAOkC,IAGnDrD,EAAAe,UAAAuC,6BAAA,SAA6BC,GAC3BnD,KAAKF,UAAUiB,YAAY,6BAA6B,EAAOoC,IAGjEvD,EAAAe,UAAAyC,kBAAA,SAAkBC,OACZC,EAAStD,KAAKO,aAClB,GAAI8C,EAAa,KACTE,EAAUF,EAAYG,IAAMH,EAAYG,IAAM,OACpDF,EAAS,IAAMC,EAAU,WAAaF,EAAYI,SAAQ,KAAOzD,KAAKO,aAAe,KAAOgD,EAAU,IAGxGvD,KAAKmB,WAAWmC,IAGlB1D,EAAAe,UAAA+C,YAAA,SAAYC,GACNA,EAASC,MAAM,oBACjB5D,KAAK6D,sBAAsBF,GAEzBA,EAASC,MAAM,cACjB5D,KAAK8D,oBAAoBH,IAIrB/D,EAAAe,UAAAkD,sBAAR,SAA8BF,OACtBI,EAAKJ,EAASK,MAAM,MAAM,GAE1BC,EAAY,4MAIHN,EAAQ,6CALN,8BAA8BI,EAAE,UAMvB,uDAG1B/D,KAAKmB,WAAW8C,IAGVrE,EAAAe,UAAAmD,oBAAR,SAA4BH,GAA5B,IAAA5D,EAAAC,KACQkE,EAAMlE,KAAKH,KAAKsE,IAAS,yCAAyCR,GAAYS,UAAS,SAACC,OACtFpB,EAAWoB,EAAKC,+BAChBL,EAAY,2BACLN,EAAQ,4CACLV,EAAQ,UAAUoB,EAAKE,MAAK,kCAG5CxE,EAAKoB,WAAW8C,GAChBC,EAAIM,iBAIR5E,EAAAe,UAAA8D,SAAA,SAASC,GACP,GAAIA,EAAKC,gBACP,OAAOD,EAAKE,WAEZ,KAAOF,IAASA,EAAKG,aACnBH,EAAOA,EAAKI,WAEd,OAAKJ,EAGEA,EAAKG,YAFH,MAMbjF,EAAAe,UAAAoE,sBAAA,SAAsBC,EAAOC,OACvBP,EAAOM,EAAME,eACXC,EAAUH,EAAMI,aAClBC,EAAa,GAGjB,GAAIX,IAASS,EACXE,EAAa,CAACX,OACT,CAEL,KAAOA,GAAQA,IAASS,GACtBE,EAAWC,KAAMZ,EAAO1E,KAAKyE,SAASC,IAKxC,IADAA,EAAOM,EAAME,eACNR,GAAQA,IAASM,EAAMO,yBAC5BF,EAAWG,QAAQd,GACnBA,EAAOA,EAAKI,WAKhB,GAAIG,EAEF,IADAP,EAAOM,EAAMO,wBACNb,GACLW,EAAWC,KAAKZ,GAChBA,EAAOA,EAAKI,WAIhB,OAAOO,GAGTzF,EAAAe,UAAA8E,iBAAA,eACQC,EAAQ,GACd,GAAI1F,KAAKF,UAAUI,aAEjB,QADMC,EAAMH,KAAKF,UAAUI,eAClByF,EAAI,EAAGC,EAAMzF,EAAIE,WAAYsF,EAAIC,IAAOD,EAC/CD,EAAMJ,KAAKO,MAAMH,EAAO1F,KAAK+E,sBAAsB5E,EAAIC,WAAWuF,IAAI,IAG1E,OAAOD,GAGT9F,EAAAe,UAAAmF,uBAAA,SAAuBC,GAErB,QADMC,EAASD,EAAGjB,WACXiB,EAAGpB,iBACRqB,EAAOC,aAAaF,EAAGnB,WAAYmB,GAErCC,EAAOE,YAAYH,IAGrBnG,EAAAe,UAAAwF,uBAAA,SAAuBC,GAAvB,IAAArG,EAAAC,KACQqG,EAAgBD,EAASE,cAActC,MAAM,KACnDhE,KAAKyF,mBAAmBc,QAAO,SAAE7B,GACT,IAAlBA,EAAK8B,UACPH,EAAcI,QAAQ/B,EAAKnB,QAAQ+C,gBAAkB,GAErDvG,EAAK+F,uBAAuBpB,0BAlSnCgC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAVNC,EAAAA,8CAoBHC,EAAAA,OAAMH,KAAA,CAACI,EAAAA,iKArBZ,GCiCaC,EAA2C,CACtDC,UAAU,EACVC,YAAY,EACZC,OAAQ,OACRC,UAAW,IACXC,UAAW,OACXC,MAAO,OACPC,SAAU,IACVC,UAAW,MACXC,eAAe,EACfC,aAAa,EACbC,YAAa,qBACbC,0BAA2B,GAC3BC,gBAAiB,GACjBC,gBAAiB,GACjBC,MAAO,CACL,CAACtE,QAAO,QAASd,KAAM,SACvB,CAACc,QAAO,kBAAmBd,KAAM,mBACjC,CAACc,QAAO,UAAWd,KAAM,WACzB,CAACc,QAAO,gBAAiBd,KAAM,kBAEjCE,UAAW,WACXmF,UAAU,EACVC,gBAAiB,OCxDnBC,EAAA,WA8CE,SAAAA,EACUC,EACAC,EACkBtI,GAFlBE,KAAAmI,UAAAA,EACAnI,KAAAoI,cAAAA,EACkBpI,KAAAF,UAAAA,EApC5BE,KAAA+D,GAAK,GACL/D,KAAAqI,UAAW,EACXrI,KAAA0H,aAAc,EACd1H,KAAAsI,cAAe,EACftI,KAAAuI,MAAQ,UAERvI,KAAAwI,OAAS,EACTxI,KAAA2B,SAAW,IAIX3B,KAAAyI,eAAiB,EAIjBzI,KAAA0I,OAAS,CACPC,WAAY,SACZC,EAAG,QAGL5I,KAAA6I,OAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,MAAO,OAE1D7I,KAAA8I,QAAU,CAAC,OAAQ,SAAU,YAAa,gBAAiB,YAAa,cAAe,cAAe,gBACpG,eAAgB,cAAe,SAAU,UAAW,sBAAuB,oBAAqB,QAExF9I,KAAA+I,QAAgC,IAAIC,EAAAA,aAgNhD,OA5MEC,OAAAC,eAAWhB,EAAAvH,UAAA,uBAAoB,KAA/B,WACE,OAAOX,KAAKqI,WAAac,QAAQnJ,KAAKoI,cAAc7H,+CAatD2H,EAAAvH,UAAAyI,eAAA,SAAevI,GACbb,KAAK+I,QAAQM,KAAKxI,IAMpBqH,EAAAvH,UAAA2I,eAAA,WAAA,IAAAvJ,EAAAC,KACOA,KAAK0H,aAGV1H,KAAK8I,QAAQvC,QAAO,SAACgD,OACbC,EAASzJ,EAAKD,UAAU2J,kBAAkBF,GAC1CG,EAAc3J,EAAKD,UAAU6J,eAAeJ,EAAI,IAAMxJ,EAAKgE,IAC7DyF,EACFzJ,EAAKoI,UAAUyB,SAASF,EAAa,UAErC3J,EAAKoI,UAAU0B,YAAYH,EAAa,aAQ9CxB,EAAAvH,UAAAmJ,cAAA,SAAcpE,GAAd,IAAA3F,EAAAC,KACE,GAAKA,KAAK0H,YAAV,CAGA1H,KAAKsI,aAAe5C,EAAMqE,UAAS,SAACC,GAAK,MAAe,MAAfA,EAAEC,YAAqB,MAC5DC,GAAQ,EACZlK,KAAK6I,OAAOtC,QAAO,SAAC4D,OACZzF,EAAOgB,EAAM0E,KAAI,SAACJ,GAAK,OAAAA,EAAEC,WAAaE,IACxCzF,IAAS2F,WAAaF,IAAMzF,EAAKuF,UACrB,IAAVC,IACFnK,EAAKwI,MAAQ7D,EAAKuF,SAAS3D,cAC3B4D,GAAQ,IAES,IAAVA,IACTnK,EAAKwI,MAAQ,aAIjB2B,GAAQ,EACJlK,KAAK+H,OACP/H,KAAK+H,MAAMxB,QAAO,SAAE4D,EAAGG,GACR5E,EAAM0E,KAAI,SAACJ,GACtB,GAAIA,aAAaO,gBACf,OAAOP,EAAEQ,OAASL,EAAExH,SAGX0H,WACG,IAAVH,IACFnK,EAAKyI,OAAS8B,EACdJ,GAAQ,IAES,IAAVA,IACTnK,EAAKyI,OAASzI,EAAK0K,iBAKzBP,GAAQ,EACJlK,KAAK0K,eACP1K,KAAK0K,cAAcnE,QAAO,SAAE4D,EAAGG,GAChB5E,EAAM0E,KAAI,SAACJ,GACtB,GAAIA,aAAaW,QACf,OAAOX,EAAEY,YAAcT,EAAE1G,aAGhB4G,WACG,IAAVH,IACFnK,EAAK0I,cAAgB6B,EACrBJ,GAAQ,IAES,IAAVA,IACTnK,EAAK0I,eAAiB,KAK5BQ,OAAO4B,KAAK7K,KAAK0I,QAAQoC,IAAG,SAACvB,OACrBG,EAAc3J,EAAKD,UAAU6J,eAAe5J,EAAK2I,OAAOa,GAAK,IAAMxJ,EAAKgE,IACxEW,EAAOgB,EAAM0E,KAAI,SAACJ,GAAK,OAAAA,EAAEC,WAAaV,IACxC7E,IAAS2F,WAAad,IAAM7E,EAAKuF,SACnClK,EAAKoI,UAAUyB,SAASF,EAAa,UAErC3J,EAAKoI,UAAU0B,YAAYH,EAAa,YAI5C1J,KAAK+K,WAAa/K,KAAKF,UAAUkL,kBAAkB,aACnDhL,KAAK2B,SAAW3B,KAAKF,UAAUkL,kBAAkB,cAMnD9C,EAAAvH,UAAAsK,UAAA,eACQhK,EAAMiK,OAAO,kBAAmB,YAClCjK,GAAe,KAARA,GAAsB,aAARA,GACvBjB,KAAKoI,cAAcpH,WAAWC,IAOlCiH,EAAAvH,UAAA+C,YAAA,WACE1D,KAAK+I,QAAQM,KAAK,QACZpI,EAAMiK,OAAO,oBAAqB,YACpCjK,GAAe,KAARA,GAAsB,aAARA,GACvBjB,KAAKoI,cAAc1E,YAAYzC,IAKnCiH,EAAAvH,UAAAS,YAAA,SAAYC,EAAeC,GACzBtB,KAAKoI,cAAchH,YAAYC,EAAOC,GACtCtB,KAAK+I,QAAQM,KAAK,KAOpBnB,EAAAvH,UAAAa,YAAA,SAAYgH,GACVxI,KAAKoI,cAAc5G,YAAYxB,KAAK+H,MAAMS,GAAQ7F,MAClD3C,KAAK+I,QAAQM,KAAK,KAOpBnB,EAAAvH,UAAAe,YAAA,SAAYC,GACV3B,KAAKoI,cAAc1G,YAAYC,GAC/B3B,KAAK+I,QAAQM,KAAK,KAOpBnB,EAAAvH,UAAAwK,cAAA,SAAcC,OACNC,EAAyBrL,KAAKF,UAAU6J,eAAe,oBAA2B3J,KAAK+D,IACzFqH,EACFpL,KAAKmI,UAAUyB,SAASyB,EAAwB,UAEhDrL,KAAKmI,UAAU0B,YAAYwB,EAAwB,UAErDrL,KAAKqI,SAAW+C,GAMlBlD,EAAAvH,UAAA2K,cAAA,SAAcC,GAAd,IAAAxL,EAAAC,KACQuC,EAAOgJ,EAAMC,OAAOC,MAAM,GAChC,GAAIlJ,EAAKmJ,KAAK5K,SAAS,UACnB,GAAId,KAAK6C,UACL7C,KAAKoI,cAAc9F,YAAYC,GAAM6B,UAAS,SAACmF,GACzCA,aAAaoC,EAAAA,eACf5L,EAAKqI,cAAcpF,YAAYuG,EAAEqC,KAAK3I,UACtClD,EAAK8L,mBAGN,KACCC,EAAS,IAAIC,WACnBD,EAAOE,OAAM,SAAIC,GACflM,EAAKqI,cAAcpF,YAAYiJ,EAAOT,OAAe,SAEvDM,EAAOI,cAAc3J,KAQ7B2F,EAAAvH,UAAAkL,UAAA,WACE7L,KAAKmM,YAAYC,cAAcC,MAAQ,IAMzCnE,EAAAvH,UAAA2L,eAAA,SAAeC,GACbvM,KAAKoI,cAAchF,kBAAkBpD,KAAK0K,cAAc6B,yBA9O3DC,EAAAA,UAAS7F,KAAA,CAAC,CACT8F,SAAU,yBACVC,SAAA,ms2CAR2DC,EAAAA,iBACrD/M,qCAgDHkH,EAAAA,OAAMH,KAAA,CAACI,EAAAA,gDAXT6F,EAAAA,4BAEAC,EAAAA,UAASlG,KAAA,CAAC,gBA8MbuB,EAtPA,GCAA4E,EAAA,WAyDE,SAAAA,EACU3E,EACAC,EACkBtI,EAClBiN,EACAC,GAJAhN,KAAAmI,UAAAA,EACAnI,KAAAoI,cAAAA,EACkBpI,KAAAF,UAAAA,EAClBE,KAAA+M,cAAAA,EACA/M,KAAAgN,MAAAA,EAzBVhN,KAAAiN,YAAa,EACbjN,KAAAkN,iBAAkB,EACTlN,KAAA+D,GAAK,GACL/D,KAAAmN,OAA8BnG,EAC9BhH,KAAA2H,YAAc,GAQb3H,KAAAoN,SAAW,IAAIpE,EAAAA,aAGfhJ,KAAAqN,KAA6B,IAAIrE,EAAAA,aAGjChJ,KAAAsN,MAA8B,IAAItE,EAAAA,aAgR9C,OAtQE8D,EAAAnM,UAAA4M,SAAA,WACEvN,KAAKmN,OAAOlF,gBAAkBjI,KAAKmN,OAAOlF,gBAAkBjI,KAAKmN,OAAOlF,gBAAkBjB,EAAoBiB,gBAC1GjI,KAAKmN,OAAOzF,cAAgB2C,YAC9BrK,KAAKwN,cAAc9F,YAAc1H,KAAKmN,OAAOzF,aAE3C1H,KAAKmN,OAAOvF,2BACd5H,KAAKoI,cAAclF,6BAA6BlD,KAAKmN,OAAOvF,4BAIhEkF,EAAAnM,UAAA8M,gBAAA,WAAA,IAAA1N,EAAAC,KACEA,KAAKwN,cAAczJ,GAAK/D,KAAK+D,GAE7B/D,KAAKwN,cAAczF,MAAQ/H,KAAKmN,OAAOpF,MAAQ/H,KAAKmN,OAAOpF,MAAQf,EAAoBe,MACvF/H,KAAKwN,cAAc9C,cAAgB1K,KAAKmN,OAAOzC,cAC/C1K,KAAKwN,cAAc3K,UAAY7C,KAAKmN,OAAOtK,UAC3C7C,KAAKoI,cAAcvF,UAAY7C,KAAKmN,OAAOtK,UACvC7C,KAAKmN,OAAOtF,iBACd7H,KAAKwN,cAAc/C,cAAgBzK,KAAKmN,OAAOtF,gBAAkB7H,KAAKwN,cAAczF,MAAMgC,UAAS,SAACC,GAClG,OAAOA,EAAErH,OAAS5C,EAAKoN,OAAOtF,kBAC3B,EACL7H,KAAKwN,cAAchF,OAASxI,KAAKwN,cAAc/C,cAC/CzK,KAAK0N,gBACL1N,KAAKoI,cAAc5G,YAAYxB,KAAKmN,OAAOtF,mBAE3C7H,KAAKwN,cAAc/C,cAAgB,EACnCzK,KAAKwN,cAAchF,OAAS,GAE1BxI,KAAKmN,OAAOrF,kBACd9H,KAAKwN,cAAc7L,SAAW3B,KAAKmN,OAAOrF,gBAC1C9H,KAAK0N,gBACL1N,KAAKoI,cAAc1G,YAAY1B,KAAKmN,OAAOrF,kBAE7C9H,KAAKgN,MAAMW,iBAObb,EAAAnM,UAAAC,eAAA,SAAeC,GACbb,KAAK0N,gBACW,qBAAZ7M,EACFb,KAAK4N,iBAAiB5N,KAAKiN,YACN,KAAZpM,IACO,YAAZA,GACFb,KAAKoI,cAAcjC,uBAAuB,2BAC1CnG,KAAK6N,gBAAgB7N,KAAK8N,SAAS1B,cAAc2B,YAEjD/N,KAAKoI,cAAcxH,eAAeC,GAEpCb,KAAKgO,SAOTlB,EAAAnM,UAAAsN,gBAAA,WACEjO,KAAKsN,MAAMjE,KAAK,UAMXyD,EAAAnM,UAAAuN,mBAAP,SAA0B3C,GACxBvL,KAAKoI,cAAcnI,iBAMrB6M,EAAAnM,UAAAwN,eAAA,SAAe5C,GAIbvL,KAAKoI,cAAcpG,4BAA4BhC,KAAKoI,cAAcnI,eAEpC,mBAAnBD,KAAKoO,WACdpO,KAAKoO,YAGoB,MAAvB7C,EAAM8C,eAA0F,+BAAhE9C,EAAmB,cAAiB+C,cAAc1D,WACtF5K,KAAKqN,KAAKhE,KAAK,SAOjByD,EAAAnM,UAAA+M,cAAA,WACM1N,KAAKiN,WACPjN,KAAK8N,SAAS1B,cAAckB,QAETtN,KAAKF,UAAU6J,eAAe,cAEtC2D,SAQfR,EAAAnM,UAAAkN,gBAAA,SAAgBjM,GAEe,mBAAlB5B,KAAKuO,WACdvO,KAAKuO,SAASvO,KAAKmN,OAAOnF,UAAYhI,KAAKmN,OAAOnF,WAAaqC,UAAYrK,KAAK+M,cAAc/E,SAASwG,EAAAA,gBAAgBC,KAAM7M,GAAQA,KAC/HA,GAAiB,SAATA,GAA4B,KAATA,KAAiB5B,KAAKkN,iBACrDlN,KAAK0O,kBAAkB1O,KAAKkN,mBAWlCJ,EAAAnM,UAAAgO,iBAAA,SAAiBC,GACf5O,KAAKuO,SAAWK,GASlB9B,EAAAnM,UAAAkO,kBAAA,SAAkBD,GAChB5O,KAAKoO,UAAYQ,GAQnB9B,EAAAnM,UAAAmO,WAAA,SAAWzC,KAEHA,GAAmB,SAAVA,GAA8B,KAAVA,KAAkBrM,KAAKkN,iBACxDlN,KAAK0O,kBAAkB1O,KAAKkN,iBAGhB,OAAVb,GAAkBA,IAAUhC,WAAuB,KAAVgC,GAA0B,SAAVA,IAC3DA,EAAQ,MAGVrM,KAAK+O,YAAY1C,IAQnBS,EAAAnM,UAAAoO,YAAA,SAAY1C,OACJ2C,EAA4B,OAAV3C,EAAiB,GAAKA,EAC9CrM,KAAKmI,UAAU8G,YAAYjP,KAAK8N,SAAS1B,cAAe,YAAa4C,IAUvElC,EAAAnM,UAAA+N,kBAAA,SAAkBrC,GACXA,GAKHrM,KAAKmI,UAAU0B,YAAY7J,KAAKkP,cAAc9C,cAAe,oBAC7DpM,KAAKkN,iBAAkB,IALvBlN,KAAKmI,UAAUyB,SAAS5J,KAAKkP,cAAc9C,cAAe,oBAC1DpM,KAAKkN,iBAAkB,IAa3BJ,EAAAnM,UAAAwO,iBAAA,SAAiBC,OACTC,EAAMrP,KAAK8N,SAAS1B,cACpBkD,EAASF,EAAa,WAAa,cACzCpP,KAAKmI,UAAUmH,GAAQD,EAAK,aAQ9BvC,EAAAnM,UAAAiN,iBAAA,SAAiB2B,OACXC,EACEC,EAAkBzP,KAAK8N,SAAS1B,cAEtC,GAAImD,EAAW,CACbC,EAAWxP,KAAKF,UAAU4P,eAAeD,EAAgB1B,WACzD0B,EAAgB1B,UAAY,OAEtB4B,EAAO3P,KAAKF,UAAU8P,cAAc,OAC1CD,EAAKE,aAAa,QAAS,iCACrBC,EAAQ9P,KAAKF,UAAU8P,cAAc,QAC3CH,EAAgBM,iBAAkB,EAClCD,EAAM/L,GAAK,aACX+L,EAAMD,aAAa,QAAS,oHAE5BC,EAAMC,gBAAkB,OACxBD,EAAMnI,YAAc,OACpBmI,EAAME,YAAYR,GAClBG,EAAKK,YAAYF,GACjBL,EAAgBO,YAAYL,GAE5B3P,KAAKF,UAAUiB,YAAY,6BAA6B,EAAO,OAE/Df,KAAKiN,YAAa,EAClBjN,KAAKoN,SAAS/D,MAAK,GACnByG,EAAMxC,aAEFtN,KAAKF,UAAUmQ,IACjBR,EAAgB1B,UAAY0B,EAAgBS,YAE5CV,EAAWxP,KAAKF,UAAUW,eACjB0P,mBAAmBV,EAAgB7K,YAC5C6K,EAAgB1B,UAAYyB,EAAShP,YAEvCiP,EAAgBM,iBAAkB,EAClC/P,KAAKiN,YAAa,EAClBjN,KAAKoN,SAAS/D,MAAK,GACnBrJ,KAAK6N,gBAAgB4B,EAAgB1B,WACrC0B,EAAgBnC,QAElBtN,KAAKwN,cAAcrC,eAAenL,KAAKiN,aAQzCH,EAAAnM,UAAAqN,KAAA,eAGMoC,EAFJpQ,KAAKwN,cAAclE,iBAGftJ,KAAKF,UAAUI,eACjBkQ,EAAgBpQ,KAAKF,UAAUI,eAC/BF,KAAKoI,cAAcpG,4BAA4BhC,KAAKoI,cAAcnI,gBAKpE,QAFIoQ,EAAID,EAAcE,UAChBC,EAAM,GACLF,GAAc,WAATA,EAAEtM,IACZwM,EAAI/K,QAAQ6K,GACZA,EAAIA,EAAEvL,WAER9E,KAAKwN,cAAc1D,cAAcyG,wBAhTpC/D,EAAAA,UAAS7F,KAAA,CAAC,CACT8F,SAAU,iBACVC,SAAA,urCAEA8D,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAA9D,IAC9B+D,OAAO,oykCAnBXlE,EAAAA,iBAMM/M,qCA6CHkH,EAAAA,OAAMH,KAAA,CAACI,EAAAA,mBA3CJ+J,EAAAA,oBAhBSC,EAAAA,iDAsCdC,EAAAA,sBACAA,EAAAA,2BACAA,EAAAA,oBAEApE,EAAAA,yBAEAC,EAAAA,UAASlG,KAAA,CAAC,iCACVkG,EAAAA,UAASlG,KAAA,CAAC,wCACVkG,EAAAA,UAASlG,KAAA,CAAC,mCAEViG,EAAAA,qBAGAA,EAAAA,sBAGAA,EAAAA,UAgRHE,EAvUA,GCAAmE,EAAA,WAMA,SAAAA,KAQA,2BARCC,EAAAA,SAAQvK,KAAA,CAAC,CACRwK,QAAS,CACPC,EAAAA,aAAcC,EAAAA,YAAaC,EAAAA,qBAE7BC,aAAc,CAACzE,EAAwB5E,GACvCsJ,QAAS,CAAC1E,EAAwB5E,OAGpC+I,EAdA","sourcesContent":["import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpEvent} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {CustomClass} from './config';\r\n\r\nexport interface UploadResponse {\r\n  imageUrl: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularEditorService {\r\n\r\n  savedSelection: Range | null;\r\n  selectedText: string;\r\n  uploadUrl: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(DOCUMENT) private _document: any\r\n  ) { }\r\n\r\n  /**\r\n   * Executed command from editor header buttons exclude toggleEditorMode\r\n   * @param command string from triggerCommand\r\n   */\r\n  executeCommand(command: string) {\r\n    const commands = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre'];\r\n    if (commands.includes(command)) {\r\n      this._document.execCommand('formatBlock', false, command);\r\n      return;\r\n    }\r\n    this._document.execCommand(command, false, null);\r\n  }\r\n\r\n  /**\r\n   * Create URL link\r\n   * @param url string from UI prompt\r\n   */\r\n  createLink(url: string) {\r\n    if (!url.includes('http')) {\r\n      this._document.execCommand('createlink', false, url);\r\n    } else {\r\n      const newUrl = '<a href=\"' + url + '\" target=\"_blank\">' + this.selectedText + '</a>';\r\n      this.insertHtml(newUrl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * insert color either font or background\r\n   *\r\n   * @param color color to be inserted\r\n   * @param where where the color has to be inserted either text/background\r\n   */\r\n  insertColor(color: string, where: string): void {\r\n    const restored = this.restoreSelection();\r\n    if (restored) {\r\n      if (where === 'textColor') {\r\n        this._document.execCommand('foreColor', false, color);\r\n      } else {\r\n        this._document.execCommand('hiliteColor', false, color);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set font name\r\n   * @param fontName string\r\n   */\r\n  setFontName(fontName: string) {\r\n    this._document.execCommand('fontName', false, fontName);\r\n  }\r\n\r\n  /**\r\n   * Set font size\r\n   * @param fontSize string\r\n   */\r\n  setFontSize(fontSize: string) {\r\n    this._document.execCommand('fontSize', false, fontSize);\r\n  }\r\n\r\n  /**\r\n   * Create raw HTML\r\n   * @param html HTML string\r\n   */\r\n  private insertHtml(html: string): void {\r\n\r\n    const isHTMLInserted = this._document.execCommand('insertHTML', false, html);\r\n\r\n    if (!isHTMLInserted) {\r\n      throw new Error('Unable to perform the operation');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * save selection when the editor is focussed out\r\n   */\r\n  public saveSelection = (): void => {\r\n    if (this._document.getSelection) {\r\n      const sel = this._document.getSelection();\r\n      if (sel.getRangeAt && sel.rangeCount) {\r\n        this.savedSelection = sel.getRangeAt(0);\r\n        this.selectedText = sel.toString();\r\n      }\r\n    } else if (this._document.getSelection && this._document.createRange) {\r\n      this.savedSelection = document.createRange();\r\n    } else {\r\n      this.savedSelection = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * restore selection when the editor is focused in\r\n   *\r\n   * saved selection when the editor is focused out\r\n   */\r\n  restoreSelection(): boolean {\r\n    if (this.savedSelection) {\r\n      if (this._document.getSelection) {\r\n        const sel = this._document.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(this.savedSelection);\r\n        return true;\r\n      } else if (this._document.getSelection /*&& this.savedSelection.select*/) {\r\n        // this.savedSelection.select();\r\n        return true;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * setTimeout used for execute 'saveSelection' method in next event loop iteration\r\n   */\r\n  public executeInNextQueueIteration(callbackFn: (...args: any) => any, timeout = 1e2): void {\r\n    setTimeout(callbackFn, timeout);\r\n  }\r\n\r\n  /** check any slection is made or not */\r\n  private checkSelection(): any {\r\n\r\n    const selectedText = this.savedSelection.toString();\r\n\r\n    if (selectedText.length === 0) {\r\n      throw new Error('No Selection Made');\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Upload file to uploadUrl\r\n   * @param file\r\n   */\r\n  uploadImage(file: File): Observable<HttpEvent<UploadResponse>> {\r\n\r\n    const uploadData: FormData = new FormData();\r\n\r\n    uploadData.append('file', file, file.name);\r\n\r\n    return this.http.post<UploadResponse>(this.uploadUrl, uploadData, {\r\n      reportProgress: true,\r\n      observe: 'events',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Insert image with Url\r\n   * @param imageUrl\r\n   */\r\n  insertImage(imageUrl: string) {\r\n    this._document.execCommand('insertImage', false, imageUrl);\r\n  }\r\n\r\n  setDefaultParagraphSeparator(separator: string) {\r\n    this._document.execCommand('defaultParagraphSeparator', false, separator);\r\n  }\r\n\r\n  createCustomClass(customClass: CustomClass) {\r\n    let newTag = this.selectedText;\r\n    if (customClass) {\r\n      const tagName = customClass.tag ? customClass.tag : 'span';\r\n      newTag = '<' + tagName + ' class=\"' + customClass.class + '\">' + this.selectedText + '</' + tagName + '>';\r\n    }\r\n\r\n    this.insertHtml(newTag);\r\n  }\r\n\r\n  insertVideo(videoUrl: string) {\r\n    if (videoUrl.match('www.youtube.com')) {\r\n      this.insertYouTubeVideoTag(videoUrl);\r\n    }\r\n    if (videoUrl.match('vimeo.com')) {\r\n      this.insertVimeoVideoTag(videoUrl);\r\n    }\r\n  }\r\n\r\n  private insertYouTubeVideoTag(videoUrl: string): void {\r\n    const id = videoUrl.split('v=')[1];\r\n    const imageUrl = `https://img.youtube.com/vi/${id}/0.jpg`;\r\n    const thumbnail = `\r\n      <div style='position: relative'>\r\n        <img style='position: absolute; left:200px; top:140px'\r\n             src=\"https://img.icons8.com/color/96/000000/youtube-play.png\"\r\n        <a href='${videoUrl}' target='_blank'>\r\n          <img src=\"${imageUrl}\" alt=\"click to watch\"/>\r\n        </a>\r\n      </div>`;\r\n    this.insertHtml(thumbnail);\r\n  }\r\n\r\n  private insertVimeoVideoTag(videoUrl: string): void {\r\n    const sub = this.http.get<any>(`https://vimeo.com/api/oembed.json?url=${videoUrl}`).subscribe(data => {\r\n      const imageUrl = data.thumbnail_url_with_play_button;\r\n      const thumbnail = `<div>\r\n        <a href='${videoUrl}' target='_blank'>\r\n          <img src=\"${imageUrl}\" alt=\"${data.title}\"/>\r\n        </a>\r\n      </div>`;\r\n      this.insertHtml(thumbnail);\r\n      sub.unsubscribe();\r\n    });\r\n  }\r\n\r\n  nextNode(node) {\r\n    if (node.hasChildNodes()) {\r\n      return node.firstChild;\r\n    } else {\r\n      while (node && !node.nextSibling) {\r\n        node = node.parentNode;\r\n      }\r\n      if (!node) {\r\n        return null;\r\n      }\r\n      return node.nextSibling;\r\n    }\r\n  }\r\n\r\n  getRangeSelectedNodes(range, includePartiallySelectedContainers) {\r\n    let node = range.startContainer;\r\n    const endNode = range.endContainer;\r\n    let rangeNodes = [];\r\n\r\n    // Special case for a range that is contained within a single node\r\n    if (node === endNode) {\r\n      rangeNodes = [node];\r\n    } else {\r\n      // Iterate nodes until we hit the end container\r\n      while (node && node !== endNode) {\r\n        rangeNodes.push( node = this.nextNode(node) );\r\n      }\r\n\r\n      // Add partially selected nodes at the start of the range\r\n      node = range.startContainer;\r\n      while (node && node !== range.commonAncestorContainer) {\r\n        rangeNodes.unshift(node);\r\n        node = node.parentNode;\r\n      }\r\n    }\r\n\r\n    // Add ancestors of the range container, if required\r\n    if (includePartiallySelectedContainers) {\r\n      node = range.commonAncestorContainer;\r\n      while (node) {\r\n        rangeNodes.push(node);\r\n        node = node.parentNode;\r\n      }\r\n    }\r\n\r\n    return rangeNodes;\r\n  }\r\n\r\n  getSelectedNodes() {\r\n    const nodes = [];\r\n    if (this._document.getSelection) {\r\n      const sel = this._document.getSelection();\r\n      for (let i = 0, len = sel.rangeCount; i < len; ++i) {\r\n        nodes.push.apply(nodes, this.getRangeSelectedNodes(sel.getRangeAt(i), true));\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n\r\n  replaceWithOwnChildren(el) {\r\n    const parent = el.parentNode;\r\n    while (el.hasChildNodes()) {\r\n      parent.insertBefore(el.firstChild, el);\r\n    }\r\n    parent.removeChild(el);\r\n  }\r\n\r\n  removeSelectedElements(tagNames) {\r\n    const tagNamesArray = tagNames.toLowerCase().split(',');\r\n    this.getSelectedNodes().forEach((node) => {\r\n      if (node.nodeType === 1 &&\r\n        tagNamesArray.indexOf(node.tagName.toLowerCase()) > -1) {\r\n        // Remove the node and replace it with its children\r\n        this.replaceWithOwnChildren(node);\r\n      }\r\n    });\r\n  }\r\n}\r\n","export interface CustomClass {\r\n  name: string;\r\n  class: string;\r\n  tag?: string;\r\n}\r\n\r\nexport interface Font {\r\n  name: string;\r\n  class: string;\r\n}\r\n\r\nexport interface AngularEditorConfig {\r\n  editable?: boolean;\r\n  spellcheck?: boolean;\r\n  height?: 'auto' | string;\r\n  minHeight?: '0' | string;\r\n  maxHeight?: 'auto' | string;\r\n  width?: 'auto' | string;\r\n  minWidth?: '0' | string;\r\n  translate?: 'yes' | 'now' | string;\r\n  enableToolbar?: boolean;\r\n  showToolbar?: boolean;\r\n  placeholder?: string;\r\n  defaultParagraphSeparator?: string;\r\n  defaultFontName?: string;\r\n  defaultFontSize?: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | string;\r\n  uploadUrl?: string;\r\n  fonts?: Font[];\r\n  customClasses?: CustomClass[];\r\n  sanitize?: boolean;\r\n  toolbarPosition?: 'top' | 'bottom';\r\n}\r\n\r\nexport const angularEditorConfig: AngularEditorConfig = {\r\n  editable: true,\r\n  spellcheck: true,\r\n  height: 'auto',\r\n  minHeight: '0',\r\n  maxHeight: 'auto',\r\n  width: 'auto',\r\n  minWidth: '0',\r\n  translate: 'yes',\r\n  enableToolbar: true,\r\n  showToolbar: true,\r\n  placeholder: 'Enter text here...',\r\n  defaultParagraphSeparator: '',\r\n  defaultFontName: '',\r\n  defaultFontSize: '',\r\n  fonts: [\r\n    {class: 'arial', name: 'Arial'},\r\n    {class: 'times-new-roman', name: 'Times New Roman'},\r\n    {class: 'calibri', name: 'Calibri'},\r\n    {class: 'comic-sans-ms', name: 'Comic Sans MS'}\r\n  ],\r\n  uploadUrl: 'v1/image',\r\n  sanitize: true,\r\n  toolbarPosition: 'top',\r\n};\r\n","import {Component, ElementRef, EventEmitter, Inject, Output, Renderer2, ViewChild} from '@angular/core';\r\nimport {AngularEditorService} from './angular-editor.service';\r\nimport {HttpResponse} from '@angular/common/http';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {CustomClass, Font} from './config';\r\n\r\n@Component({\r\n  selector: 'angular-editor-toolbar',\r\n  templateUrl: './angular-editor-toolbar.component.html',\r\n  styleUrls: ['./angular-editor-toolbar.component.scss']\r\n})\r\n\r\nexport class AngularEditorToolbarComponent {\r\n  id = '';\r\n  htmlMode = false;\r\n  showToolbar = true;\r\n  linkSelected = false;\r\n  block = 'default';\r\n  defaultFontId;\r\n  fontId = 0;\r\n  fontSize = '5';\r\n  fontColour;\r\n  fonts: Font[];\r\n\r\n  customClassId = -1;\r\n  customClasses: CustomClass[];\r\n  uploadUrl: string;\r\n\r\n  tagMap = {\r\n    BLOCKQUOTE: 'indent',\r\n    A: 'link'\r\n  };\r\n\r\n  select = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'P', 'PRE', 'DIV'];\r\n\r\n  buttons = ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'justifyLeft', 'justifyCenter',\r\n    'justifyRight', 'justifyFull', 'indent', 'outdent', 'insertUnorderedList', 'insertOrderedList', 'link'];\r\n\r\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  @ViewChild('fileInput') myInputFile: ElementRef;\r\n\r\n  public get isLinkButtonDisabled(): boolean {\r\n    return this.htmlMode || !Boolean(this.editorService.selectedText);\r\n  }\r\n\r\n  constructor(\r\n    private _renderer: Renderer2,\r\n    private editorService: AngularEditorService,\r\n    @Inject(DOCUMENT) private _document: any\r\n  ) { }\r\n\r\n  /**\r\n   * Trigger command from editor header buttons\r\n   * @param command string from toolbar buttons\r\n   */\r\n  triggerCommand(command: string) {\r\n    this.execute.emit(command);\r\n  }\r\n\r\n  /**\r\n   * highlight editor buttons when cursor moved or positioning\r\n   */\r\n  triggerButtons() {\r\n    if (!this.showToolbar) {\r\n      return;\r\n    }\r\n    this.buttons.forEach(e => {\r\n      const result = this._document.queryCommandState(e);\r\n      const elementById = this._document.getElementById(e + '-' + this.id);\r\n      if (result) {\r\n        this._renderer.addClass(elementById, 'active');\r\n      } else {\r\n        this._renderer.removeClass(elementById, 'active');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * trigger highlight editor buttons when cursor moved or positioning in block\r\n   */\r\n  triggerBlocks(nodes: Node[]) {\r\n    if (!this.showToolbar) {\r\n      return;\r\n    }\r\n    this.linkSelected = nodes.findIndex(x => x.nodeName === 'A') > -1;\r\n    let found = false;\r\n    this.select.forEach(y => {\r\n      const node = nodes.find(x => x.nodeName === y);\r\n      if (node !== undefined && y === node.nodeName) {\r\n        if (found === false) {\r\n          this.block = node.nodeName.toLowerCase();\r\n          found = true;\r\n        }\r\n      } else if (found === false) {\r\n        this.block = 'default';\r\n      }\r\n    });\r\n\r\n    found = false;\r\n    if (this.fonts) {\r\n      this.fonts.forEach((y, index) => {\r\n        const node = nodes.find(x => {\r\n          if (x instanceof HTMLFontElement) {\r\n            return x.face === y.name;\r\n          }\r\n        });\r\n        if (node !== undefined) {\r\n          if (found === false) {\r\n            this.fontId = index;\r\n            found = true;\r\n          }\r\n        } else if (found === false) {\r\n          this.fontId = this.defaultFontId;\r\n        }\r\n      });\r\n    }\r\n\r\n    found = false;\r\n    if (this.customClasses) {\r\n      this.customClasses.forEach((y, index) => {\r\n        const node = nodes.find(x => {\r\n          if (x instanceof Element) {\r\n            return x.className === y.class;\r\n          }\r\n        });\r\n        if (node !== undefined) {\r\n          if (found === false) {\r\n            this.customClassId = index;\r\n            found = true;\r\n          }\r\n        } else if (found === false) {\r\n          this.customClassId = -1;\r\n        }\r\n      });\r\n    }\r\n\r\n    Object.keys(this.tagMap).map(e => {\r\n      const elementById = this._document.getElementById(this.tagMap[e] + '-' + this.id);\r\n      const node = nodes.find(x => x.nodeName === e);\r\n      if (node !== undefined && e === node.nodeName) {\r\n        this._renderer.addClass(elementById, 'active');\r\n      } else {\r\n        this._renderer.removeClass(elementById, 'active');\r\n      }\r\n    });\r\n\r\n    this.fontColour = this._document.queryCommandValue('ForeColor');\r\n    this.fontSize = this._document.queryCommandValue('FontSize');\r\n  }\r\n\r\n  /**\r\n   * insert URL link\r\n   */\r\n  insertUrl() {\r\n    const url = prompt('Insert URL link', 'https:\\/\\/');\r\n    if (url && url !== '' && url !== 'https://') {\r\n      this.editorService.createLink(url);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * insert Video link\r\n   */\r\n  insertVideo() {\r\n    this.execute.emit('');\r\n    const url = prompt('Insert Video link', `https://`);\r\n    if (url && url !== '' && url !== `https://`) {\r\n      this.editorService.insertVideo(url);\r\n    }\r\n  }\r\n\r\n  /** insert color */\r\n  insertColor(color: string, where: string) {\r\n    this.editorService.insertColor(color, where);\r\n    this.execute.emit('');\r\n  }\r\n\r\n  /**\r\n   * set font Name/family\r\n   * @param fontId number\r\n   */\r\n  setFontName(fontId: number): void {\r\n    this.editorService.setFontName(this.fonts[fontId].name);\r\n    this.execute.emit('');\r\n  }\r\n\r\n  /**\r\n   * set font Size\r\n   * @param fontSize string\r\n   */\r\n  setFontSize(fontSize: string): void {\r\n    this.editorService.setFontSize(fontSize);\r\n    this.execute.emit('');\r\n  }\r\n\r\n  /**\r\n   * toggle editor mode (WYSIWYG or SOURCE)\r\n   * @param m boolean\r\n   */\r\n  setEditorMode(m: boolean) {\r\n    const toggleEditorModeButton = this._document.getElementById('toggleEditorMode' + '-' + this.id);\r\n    if (m) {\r\n      this._renderer.addClass(toggleEditorModeButton, 'active');\r\n    } else {\r\n      this._renderer.removeClass(toggleEditorModeButton, 'active');\r\n    }\r\n    this.htmlMode = m;\r\n  }\r\n\r\n  /**\r\n   * Upload image when file is selected\r\n   */\r\n  onFileChanged(event) {\r\n    const file = event.target.files[0];\r\n    if (file.type.includes('image/')) {\r\n        if (this.uploadUrl) {\r\n            this.editorService.uploadImage(file).subscribe(e => {\r\n              if (e instanceof HttpResponse) {\r\n                this.editorService.insertImage(e.body.imageUrl);\r\n                this.fileReset();\r\n              }\r\n            });\r\n        } else {\r\n          const reader = new FileReader();\r\n          reader.onload = (_event) => {\r\n            this.editorService.insertImage(_event.target['result']);\r\n          };\r\n          reader.readAsDataURL(file);\r\n        }\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Reset Input\r\n   */\r\n  fileReset() {\r\n    this.myInputFile.nativeElement.value = '';\r\n  }\r\n\r\n  /**\r\n   * Set custom class\r\n   */\r\n  setCustomClass(classId: number) {\r\n    this.editorService.createCustomClass(this.customClasses[classId]);\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit, ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {AngularEditorConfig, angularEditorConfig} from './config';\r\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\r\nimport {AngularEditorService} from './angular-editor.service';\r\nimport {DOCUMENT} from '@angular/common';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\nimport { SecurityContext } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'angular-editor',\r\n  templateUrl: './angular-editor.component.html',\r\n  styleUrls: ['./angular-editor.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AngularEditorComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AngularEditorComponent implements OnInit, ControlValueAccessor, AfterViewInit {\r\n\r\n  private onChange: (value: string) => void;\r\n  private onTouched: () => void;\r\n\r\n  modeVisual = true;\r\n  showPlaceholder = false;\r\n  @Input() id = '';\r\n  @Input() config: AngularEditorConfig = angularEditorConfig;\r\n  @Input() placeholder = '';\r\n\r\n  @Output() html;\r\n\r\n  @ViewChild('editor') textArea: any;\r\n  @ViewChild('editorWrapper') editorWrapper: any;\r\n  @ViewChild('editorToolbar') editorToolbar: AngularEditorToolbarComponent;\r\n\r\n  @Output() viewMode = new EventEmitter<boolean>();\r\n\r\n  /** emits `blur` event when focused out from the textarea */\r\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /** emits `focus` event when focused in to the textarea */\r\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private _renderer: Renderer2,\r\n    private editorService: AngularEditorService,\r\n    @Inject(DOCUMENT) private _document: any,\r\n    private _domSanitizer: DomSanitizer,\r\n    private cdRef: ChangeDetectorRef\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.config.toolbarPosition = this.config.toolbarPosition ? this.config.toolbarPosition : angularEditorConfig.toolbarPosition;\r\n    if (this.config.showToolbar !== undefined) {\r\n      this.editorToolbar.showToolbar = this.config.showToolbar;\r\n    }\r\n    if (this.config.defaultParagraphSeparator) {\r\n      this.editorService.setDefaultParagraphSeparator(this.config.defaultParagraphSeparator);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.editorToolbar.id = this.id;\r\n\r\n    this.editorToolbar.fonts = this.config.fonts ? this.config.fonts : angularEditorConfig.fonts;\r\n    this.editorToolbar.customClasses = this.config.customClasses;\r\n    this.editorToolbar.uploadUrl = this.config.uploadUrl;\r\n    this.editorService.uploadUrl = this.config.uploadUrl;\r\n    if (this.config.defaultFontName) {\r\n      this.editorToolbar.defaultFontId = this.config.defaultFontName ? this.editorToolbar.fonts.findIndex(x => {\r\n        return x.name === this.config.defaultFontName;\r\n      }) : 0;\r\n      this.editorToolbar.fontId = this.editorToolbar.defaultFontId;\r\n      this.onEditorFocus();\r\n      this.editorService.setFontName(this.config.defaultFontName);\r\n    } else {\r\n      this.editorToolbar.defaultFontId = 0;\r\n      this.editorToolbar.fontId = 0;\r\n    }\r\n    if (this.config.defaultFontSize) {\r\n      this.editorToolbar.fontSize = this.config.defaultFontSize;\r\n      this.onEditorFocus();\r\n      this.editorService.setFontSize(this.config.defaultFontSize);\r\n    }\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * Executed command from editor header buttons\r\n   * @param command string from triggerCommand\r\n   */\r\n  executeCommand(command: string) {\r\n    this.onEditorFocus();\r\n    if (command === 'toggleEditorMode') {\r\n      this.toggleEditorMode(this.modeVisual);\r\n    } else if (command !== '') {\r\n      if (command === 'default') {\r\n        this.editorService.removeSelectedElements('h1,h2,h3,h4,h5,h6,p,pre');\r\n        this.onContentChange(this.textArea.nativeElement.innerHTML);\r\n      } else {\r\n        this.editorService.executeCommand(command);\r\n      }\r\n      this.exec();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * focus event\r\n   */\r\n  onTextAreaFocus(): void {\r\n    this.focus.emit('focus');\r\n  }\r\n\r\n  /**\r\n   * @description fires when cursor leaves textarea\r\n   */\r\n  public onTextAreaMouseOut(event: MouseEvent): void {\r\n    this.editorService.saveSelection();\r\n  }\r\n\r\n  /**\r\n   * blur event\r\n   */\r\n  onTextAreaBlur(event: FocusEvent) {\r\n    /**\r\n     * save selection if focussed out\r\n     */\r\n    this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\r\n\r\n    if (typeof this.onTouched === 'function') {\r\n      this.onTouched();\r\n    }\r\n\r\n    if (event.relatedTarget != null && (event.relatedTarget as HTMLElement).parentElement.className !== 'angular-editor-toolbar-set') {\r\n    this.blur.emit('blur');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  focus the text area when the editor is focussed\r\n   */\r\n  onEditorFocus() {\r\n    if (this.modeVisual) {\r\n      this.textArea.nativeElement.focus();\r\n    } else {\r\n      const sourceText = this._document.getElementById('sourceText');\r\n      // sourceText.textContent = '1';\r\n      sourceText.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executed from the contenteditable section while the input property changes\r\n   * @param html html string from contenteditable\r\n   */\r\n  onContentChange(html: string): void {\r\n\r\n    if (typeof this.onChange === 'function') {\r\n      this.onChange(this.config.sanitize || this.config.sanitize === undefined ? this._domSanitizer.sanitize(SecurityContext.HTML, html) : html);\r\n      if ((!html || html === '<br>' || html === '') !== this.showPlaceholder) {\r\n        this.togglePlaceholder(this.showPlaceholder);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called\r\n   * when the control receives a change event.\r\n   *\r\n   * @param fn a function\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called\r\n   * when the control receives a touch event.\r\n   *\r\n   * @param fn a function\r\n   */\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * Write a new value to the element.\r\n   *\r\n   * @param value value to be executed when there is a change in contenteditable\r\n   */\r\n  writeValue(value: any): void {\r\n\r\n    if ((!value || value === '<br>' || value === '') !== this.showPlaceholder) {\r\n      this.togglePlaceholder(this.showPlaceholder);\r\n    }\r\n\r\n    if (value === null || value === undefined || value === '' || value === '<br>') {\r\n      value = null;\r\n    }\r\n\r\n    this.refreshView(value);\r\n  }\r\n\r\n  /**\r\n   * refresh view/HTML of the editor\r\n   *\r\n   * @param value html string from the editor\r\n   */\r\n  refreshView(value: string): void {\r\n    const normalizedValue = value === null ? '' : value;\r\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * toggles placeholder based on input string\r\n   *\r\n   * @param value A HTML string from the editor\r\n   */\r\n  togglePlaceholder(value: boolean): void {\r\n    if (!value) {\r\n      this._renderer.addClass(this.editorWrapper.nativeElement, 'show-placeholder');\r\n      this.showPlaceholder = true;\r\n\r\n    } else {\r\n      this._renderer.removeClass(this.editorWrapper.nativeElement, 'show-placeholder');\r\n      this.showPlaceholder = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implements disabled state for this element\r\n   *\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    const div = this.textArea.nativeElement;\r\n    const action = isDisabled ? 'addClass' : 'removeClass';\r\n    this._renderer[action](div, 'disabled');\r\n  }\r\n\r\n  /**\r\n   * toggles editor mode based on bToSource bool\r\n   *\r\n   * @param bToSource A boolean value from the editor\r\n   */\r\n  toggleEditorMode(bToSource: boolean) {\r\n    let oContent: any;\r\n    const editableElement = this.textArea.nativeElement;\r\n\r\n    if (bToSource) {\r\n      oContent = this._document.createTextNode(editableElement.innerHTML);\r\n      editableElement.innerHTML = '';\r\n\r\n      const oPre = this._document.createElement('pre');\r\n      oPre.setAttribute('style', 'margin: 0; outline: none;');\r\n      const oCode = this._document.createElement('code');\r\n      editableElement.contentEditable = false;\r\n      oCode.id = 'sourceText';\r\n      oCode.setAttribute('style', 'display:block; white-space: pre-wrap; word-break:' +\r\n        ' keep-all; margin: 0; outline: none; background-color: #fff5b9;');\r\n      oCode.contentEditable = 'true';\r\n      oCode.placeholder = 'test';\r\n      oCode.appendChild(oContent);\r\n      oPre.appendChild(oCode);\r\n      editableElement.appendChild(oPre);\r\n\r\n      this._document.execCommand('defaultParagraphSeparator', false, 'div');\r\n\r\n      this.modeVisual = false;\r\n      this.viewMode.emit(false);\r\n      oCode.focus();\r\n    } else {\r\n      if (this._document.all) {\r\n        editableElement.innerHTML = editableElement.innerText;\r\n      } else {\r\n        oContent = this._document.createRange();\r\n        oContent.selectNodeContents(editableElement.firstChild);\r\n        editableElement.innerHTML = oContent.toString();\r\n      }\r\n      editableElement.contentEditable = true;\r\n      this.modeVisual = true;\r\n      this.viewMode.emit(true);\r\n      this.onContentChange(editableElement.innerHTML);\r\n      editableElement.focus();\r\n    }\r\n    this.editorToolbar.setEditorMode(!this.modeVisual);\r\n  }\r\n\r\n  /**\r\n   * toggles editor buttons when cursor moved or positioning\r\n   *\r\n   * Send a node array from the contentEditable of the editor\r\n   */\r\n  exec() {\r\n    this.editorToolbar.triggerButtons();\r\n\r\n    let userSelection;\r\n    if (this._document.getSelection) {\r\n      userSelection = this._document.getSelection();\r\n      this.editorService.executeInNextQueueIteration(this.editorService.saveSelection);\r\n    }\r\n\r\n    let a = userSelection.focusNode;\r\n    const els = [];\r\n    while (a && a.id !== 'editor') {\r\n      els.unshift(a);\r\n      a = a.parentNode;\r\n    }\r\n    this.editorToolbar.triggerBlocks(els);\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {AngularEditorComponent} from './angular-editor.component';\r\nimport {AngularEditorToolbarComponent} from './angular-editor-toolbar.component';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule, FormsModule, ReactiveFormsModule\r\n  ],\r\n  declarations: [AngularEditorComponent, AngularEditorToolbarComponent],\r\n  exports: [AngularEditorComponent, AngularEditorToolbarComponent]\r\n})\r\nexport class AngularEditorModule {\r\n}\r\n"]}